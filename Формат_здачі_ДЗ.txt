HW1:
Скрін з результатами проходження Git Quiz

HW2:
Опис компонентів у текстовому файлі

HW3:
Опис всіх пунків завтання у текстовому файлі

HW4:
1. Скрін створення користувача
2. Скрін додавання в групу sudo
3. Скріни створення сценарія
4. Скрін зміни хоста при запуску від користувача bob
5. Скріни статуса сервіса nginx й команди netstat

HW5:
1. Код скрипта й скрін його роботи
2. Код скрипта й скрін його роботи
3. Код скрипта й скрін його роботи
4. Код скрипта й скрін його роботи
5. Код скрипта й скрін його роботи
6. Код скрипта й скрін його роботи
7. Код скрипта й скрін його роботи
8. Код скрипта й скрін його роботи
9. Код скрипта й скрін його роботи
10. Код скрипта й скрін його роботи
11. Код сервіса й скрін його роботи

HW6:
1. Код скрипта й скрін його роботи
2. Скрін створення користувача
3. Конфігураційний файл SSH сервера, скріни роботи й підключення
4. Конфігураційний файл SSH сервера, скріни роботи в режимі налагодження

HW7:
Завдання 1
1. Скрін створення облікових записів
2. Скрін стровення груп
3. Скрін призначення користувачів до груп
4. Скрін користувачів в групі "розробники" за замовчуванням 
5. Скрін створення домашніх каталогів
6. Скрін створення користувача й клонування домашнього каталогу dev1
7. Скрін створення каталогу й надання дозволів
8. Скрін надання прав достуку для файлу
Завдання 2
1. Скрін змісту crontab 
2. Скрін роботи скрипта
3. Скрін змісту файла /var/log/disk.log
Завдання 3
1. Код конфіга Monit.
2. Скріни роботи Monit (сервіс й веб)

HW8:
1. Код змісту Vagrantfile
2. Скрін сторінки, яку відображає nginx на 82му порті

Step1:
1. Код змісту Vagrantfile
2. Скрін вашого git репозиторія з проектом PetClinic
3. Скрін підключення з однієї віртуалки до бази даних, яка на іншій.
4. Як що, якісь кроки не в Vagrantfile, а вручну виконувались, то скріни тих кроків
5. Скрін роботи аплікації на 8080 порту з прикладом додавання своїх даних
------------------------------------------------------------------------------------

HW10:
1. Код програми й скріни роботи програми

HW11:
1. Код програми й скріни роботи програми

HW12:
1. Код програми app.py й скріни роботи програми
2. Скріни GET, POST, PUT, PATCH, DELETE
3. Код test_requests.py
4. Код results.txt 
5. Код equirements.txt

HW13:
1. Код Dockerfile
2. Скрін запуску контейнера
3. Скріни запитів get, post, put (на вібир) за допомогою програми Postman
4. Код  requirements.txt, Dockerfile, .dockerignore

HW14:
1. Код docker-compose.yml
2. Код Dockerfile
3. Код nginx.conf
4. Скріни запуску й роботи сервісів
5. Скріни результату роботи сервісів в браузері

Step2:
1. Код з Node.js app у вас в репозиторії
2. Скрін вашого створеного акаунту на Docker Hub
3. Код Vagrantfile або скріни встановлення Docker й Jenkins на першу віртуалку
4. Так само для другої віртуалки, код або скріншоти.
5. Скріншоти підключення Jenkins worker, додавання credentials вашого Docker Hub.
6. Код пайплайну
7. Скріни роботи пайплайну (покроково)
------------------------------------------------------------------------------------

HW16:
Завдання 1
1. Скрін з створеним EC2, який має публічний IP
2. Скрін з підключенням до EC2 по SSH
3. Скрін з видаленням EC2
Завдання 2
1. Скрін з створеним S3 й завантаженим туди файлом
2. Скрін з скачаним з створеного S3 файла на свій ПК
3. Скрін з створеною IAM policy
4. Скрін з створеним тестовим користувачем, й встановленої йому policy
5. Скрін з залогіненим тестовим користувачем
6. Скрін, де залогінений тестовий користувач не має доступу до інших S3 (у вигляді іншого - існує S3 групи у eu-central-1, наприклад)
7. Скрін з видаленнням всього, що було створено. S3 групи ні в якому разі не видаляйте!

HW17:
1. Скрін з створеним VPC
2. Скріни з створеними сабнетами
3. Скріни з створеними ЕС2
4. Скріни з створенням всього необхідного для доступу до Інтернет
5. Скрін з підключенням по SSH до EC2, яка в публічній підмережі
6. Скрін з підключенням по SSH з EC2, яка в публічній підмережі до ЕС2, яка в приватній підмережі
7. Скрін з пінгом google.com з EC2, яка в приватній підмережі

HW18:
Завдання 1
1. Скрін з створеним ECR
2. Код з Dockerfile, в якому буде, наприклад, встановлення вебсервера Apache, 
додавання одного рядка тексту в index.html (як приклад), запуском httpd
3. Скрін з описом, як використовувати ECR (Push commands)
4. Скрін з логіном с командного рядка в ECR
5. Скрін з білдом імеджа з Dockerfile 
6. Скрін з пушем імеджа в створений ECR
7. Cкрін з видаленням ERC
Завдання 2
1. Скрін з створеним AWS MySQL database
2. Скрін з кідключенням, з власного ПК, до створеного AWS MySQL
3. Скрін з видаленням AWS MySQL database
Завдання 3
1. Скрін з EventBridge з відповідними тригерами
2. Скрін з створеною IAM ролью
3. Скрін з змістом IAM ролі
4. Скрін з створеною(ми) EC2 з відповідним тегом (по якому фільтр Lambda відпрацьовувати)
5. Код з Lambda Function на Python, використовуючи бібліотеку boto3
6. Скрін, як відпрацьовує (чекати 12 00 не обо'язково для цього ;) просто поставити інший час)
7. Скрін з видаленням Lambda Function й IAM ролі

HW19:
1. Код створення VPC, EC2, GW, etc.
2. Скріни з створенням всього необхідного для доступу до Інтернет
3. Скрін з підключенням по SSH до EC2, яка в публічній підмережі
4. Скрін з підключенням по SSH з EC2, яка в публічній підмережі до ЕС2, яка в приватній підмережі
5. Скрін з пінгом google.com з EC2, яка в приватній підмережі
6. Скрін з видаленням створеної інфраструктури

HW20:
1. Код з створенням модуля й всього необхідного для підняття інфраструктури
2. Скрін з підняттям інфраструктури
3. Скрін з EC2 й його IP
4. Cкрін з працюючим nginx
5. Скрін з змістом бакета, де ваш стейт файл

HW21:
1. Код з створенням всього по завданню
2. Код Ansible inventory, який створиться
3. Код Ansible playbook yaml file
4. Скріни розгортання інфраструктури, роботи Ansible, результат підняття (зайти в браузері на відповідні веб сторінки)
5. Скріни видалення всього створеного

Step3:
1. Код створення S3 бакета
2. Код створення інфраструктури
3. Скріни створення інфраструктури (все покроково, як в завданні)
4. Код Ansible playbook yaml file
5. Код конфіга nginx
6. Скріни всіх дій, які робляться вручну
7. Код пайплайну й скріни відпрацювання його
8. Скріни видалення всього створеного
------------------------------------------------------------------------------------

HW23:
1. Код створення кластера
2. Код всіх необхідних маніфестів
3. Скріни виконання завдання
4. Скрін дефолтної nginx сторінки в вашому кластері

HW24:
1. Код Dockerfile
2. Скрін імеджа в вашому Docker Hub репозиторії
3. Код створення кластера
4. Код всіх необхідних маніфестів
5. Скріни перевірки, як відпрацьовує скрипт й відображає зміст з різних подів

Step4:
1. Код власноствореної апки на Пайтоні, яка працює з базою даних MySQL (або взяти готову за посиланням, й переробити в разі необхідності). Апка повинна бути з тестами.
2. Код Dockerfile для імеджа з апкою
3. Код власного кластера (MiniKube або Kind)
4. Код всіх необхідних маніфестів
5. Скріни підняття кластера й аплая маніфестів (як що вручну, перед пайплайном)
6. Скріни перевірки статусу
7. Скрін ~/.kube/config, де вказані IP адреса кластера
8. Скріни підняття власного GitLab CE (встановити на віртуалку, або підняти в Docker)
9. Скріни підключення GitLab Docker runner
10. Скрін змінних GitLab проекту (Settings - CI/CD - Variables)
11. Скріни змінних оточення (які передаютьсяв апку (DB_HOST)
12. Код пайплайну(.gitlab-ci.yml)
13. Код PVC й PV
14. Скріни підключення PV
15. Скріни роботи пайплайну
16. Скріни роботи апки (При пуші в репозиторій повинен запуститись пайплайн
17. Скріни подів (2 з апкою й одна з MySQL)
18. Скріни бази даних, яка залищається на хості, після видалення кластера (опціонально)
------------------------------------------------------------------------------------

HW26:
1. Код Dockerfile
2. Код docker-compose.yaml
3. Код файлів конфігурації
4. Скріни запуску й роботи EFK
5. Скріни роботи Kibana

HW27:
1. Код Docker файлів
2. Код файлів конфігурації
3. Скріни метрик
4. Скріни моніторингу
5. Скріни дашбордів
6. Код для алертів
7. Скріни відпрацювання алертів

Final Project:
1. Код backend сервера (Бажано, щоб код передавав IP адресу пода)
2. Код Dockerfile
3. Код GitHub або GitLab пайплайну (дивлячись, який вибрали для автоматизації, за власним бажанням)
4. Код створення кластера, nginx controller, etc.
5. Код підняття ArgoCD
6. Код маніфестів
7. Скріни роботи кластера, неймспейсів, роботи ArgoCD, конфірурації ArgoCD, зміни імеджів в Docker Hub, etc.
8. Скріни виконання завдання по пунктах (для захисту проекту)









